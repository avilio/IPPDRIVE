import 'dart:async';
import 'dart:convert';

import 'package:flutter/foundation.dart';
import 'package:ippdrive/services/requestsAPI/apiRESTRequests.dart';

/**
 * Due to the simulation purposes, the Android VM simulator does not recognize localhost as
 * localhost, so the address 10.0.2.2 have to replace the original address, in order to work
 */
final String server = defaultTargetPlatform == TargetPlatform.android ? "10.0.2.2" : "localhost";
/**
 * The [host] that contains the web service
 */
var host = 'http://$server:8080/baco';
//var host = 'https://pae.ipportalegre.pt/testes2';


/**
 * Create a body JSON to send a post request to the api and returns a [Map] obtained as response,
 * this is the first phase of user authentication, in order to 'login' into to the app.
 *
 * (the 'apikey' 1234567890 it was generated by the Api Admin)
 */
  Future<Map> wsAuth() async {
    //var url = 'https://pae.ipportalegre.pt/testes2/wsjson/api/app/ws-authenticate';
    var url ='$host/wsjson/api/app/ws-authenticate';
    Map body = { "data": { "apikey": "1234567890"}};

    String response = await postRequest(url, body);

    return jsonDecode(response);
  }

/**
 * Create a [body] JSON with given [user], [password] and [bacosess] to send a post request to the api
 * and returns a Map obtained as response, bacosess is a field from the Map returned by [wsAuth],
 * username and password (chave de App Moveis) need to be previously generated by the user
 */
Future<Map> wsRLogin(String user, String password, String bacosess) async {
    //var url = 'https://pae.ipportalegre.pt/testes2/wsjson/api/app/secure/ws-rlogin-challenge';
    var url ='${host}/wsjson/api/app/secure/ws-rlogin-challenge';
    var body = {
      "data": {
        "chaveAppsMoveis": password,
        "username": user
      },
      "BACOSESS": bacosess
    };

    String response = await postRequest(url, body);

    return jsonDecode(response);
  }

/**
 * Create a [body] JSON with given [bacosess] to send a post request to the api
 * and returns a Map with the course units from the specific year as [response].
 * [bacosess] is a field from the Map returned by [wsRLogin],
 *
 */
Future<Map> wsCoursesUnitsContents(String bacosess) async {
     var url = '${host}/user/vfs.do';
    //var url = 'https://pae.ipportalegre.pt/testes2/user/vfs.do';
    var body = {
      "BACOSESS": bacosess,
      "data": {
        // "year":"201718" //pode ir ou nao, se nao levar parametros vai buscar o ano atual
      },
      "serviceJson": "vfsReadMyCourseUnitsContents"
    };

    String response = await postRequest(url, body);

    if (jsonDecode(response)['service'] == 'error')
      return jsonDecode(response)['exception'];
    else
      return jsonDecode(response);
  }

/**
 * Create a [body] JSON with given [list] and [session] to send a post request to the api
 * and returns a Map with the content of a course unit as [response].
 */
  Future<Map> courseUnitsContents(Map list, String session) async {

      var url = '${host}/user/vfs.do';
      var body = {
        "BACOSESS": session,
        "data": {"command": "read", "parentId": list['id']},
        "serviceJson": "vfscommand"
      };

      String response = await postRequest(url, body);
      print(jsonDecode(response));
      if (jsonDecode(response)['service'] == 'error')
        return jsonDecode(response)['exception'];
      else
        return jsonDecode(response);

  }

/**
 * Create a [body] JSON with given [id] and [session] to send a post request to the api
 * and returns a Map with the folder added to favorites as [response].
 */
  Future<Map> addFavorites(int id, String session) async {
   // print(id);
    //var url = 'https://pae.ipportalegre.pt/testes2/user/vfs.do';
    var url = '${host}/user/vfs.do';
    var body = {
      "BACOSESS": session,
      "data": {"id": id},
      "serviceJson": "vfsAddFavorite"
    };

    String response = await postRequest(url, body);

    if (jsonDecode(response)['service'] == 'error')
      return jsonDecode(response)['exception'];
    else
      return jsonDecode(response);
  }

/**
 * Create a [body] JSON with given [id] and [session] to send a post request to the api
 * and returns a Map with the folder removed to favorites as [response].
 */
Future<Map> remFavorites(int id, String session) async {

  //print(parentId);
  //var url = 'https://pae.ipportalegre.pt/testes2/user/vfs.do';
  var url = '${host}/user/vfs.do';
  var body = {
    "BACOSESS": session,
    "data": {"id": id},
    "serviceJson": "vfsRemoveFavorite"
  };

  String response = await postRequest(url, body);

  if (jsonDecode(response)['service'] == 'error')
    return jsonDecode(response)['exception'];
  else
    return jsonDecode(response);
}

/**
 * Create a [body] JSON with given [session] to send a post request to the api
 * and returns a Map with the list of favorites as [response].
 */
Future<Map> readFavorites(String session) async {

  //print(parentId);
  //var url = 'https://pae.ipportalegre.pt/testes2/user/vfs.do';
  var url = '${host}/user/vfs.do';
  var body = {
    "BACOSESS": session,
    "data": {},
    "serviceJson": "vfsReadFavorites"
  };

  String response = await postRequest(url, body);

  if (jsonDecode(response)['service'] == 'error')
    return jsonDecode(response)['exception'];
  else
    return jsonDecode(response);
}

/**
 * Create a [url] with given [id] and [bacosession] to send a get request to the api
 * and returns a Map with the folder added to favorites as [response].
 */
Future<dynamic> getFiles(String bacosess, String id) async {
//todo devolver bytes ou ver como fa√ßo download
  //var url = 'https://pae.ipportalegre.pt/testes2/wsjson/api/user/ws-courses-units-my-list?BACOSESS=${bacosess}';
  var url = '$host/repositoryStream/$id?BACOSESS=$bacosess';
  print(url);
  var response = await getRequest(url);
  print(response.headers['content-type']);
  print(response.bodyBytes);
  //f.readAsBytesSync();
  //print(jsonDecode(response));
/*  if (jsonDecode(response)['service'] == 'error')
    return jsonDecode(response)['exception'];
  else
    return jsonDecode(response);*/
  return response;
}